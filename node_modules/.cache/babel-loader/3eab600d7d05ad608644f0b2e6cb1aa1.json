{"ast":null,"code":"//array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users')); //backend\n\nexport function configureBackend() {\n  let realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        //register user\n        if (url.endsWith('/register') && opts.method === 'POST') {\n          let newUser = JSON.parse(opts.body); //check if duplicate\n\n          let duplicateUser = users.filter(user => {\n            return user.username === newUser.username;\n          }).length;\n\n          if (duplicateUser) {\n            reject('Username \"' + newUser.username + '\" is already taken');\n            return;\n          } //save new user\n\n\n          newUser.id = user.length ? Math.max(...users.map(user => user.id)) + 1 : 1;\n          users.push(newUser);\n          localStorage.setItem('users', JSON.stringify(users)); //respond\n\n          resolve({\n            ok: true,\n            text: () => Promise.resolve()\n          });\n          return;\n        }\n\n        realFetch(url, opts).then(response => resolve(response));\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["/home/neosoft/Desktop/ReactPractice/todo-list-app/src/_helpers/backend.js"],"names":["users","JSON","parse","localStorage","getItem","configureBackend","realFetch","window","fetch","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","newUser","body","duplicateUser","filter","user","username","length","id","Math","max","map","push","setItem","stringify","ok","text","then","response"],"mappings":"AACA;AACA,IAAIA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAZ,C,CAEA;;AACA,OAAO,SAASC,gBAAT,GAA2B;AAC9B,MAAIC,SAAS,GAAGC,MAAM,CAACC,KAAvB;;AACAD,EAAAA,MAAM,CAACC,KAAP,GAAe,UAASC,GAAT,EAAaC,IAAb,EAAkB;AAC7B,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAASC,MAAT,KAAoB;AACvCC,MAAAA,UAAU,CAAC,MAAM;AAEb;AACA,YAAGL,GAAG,CAACM,QAAJ,CAAa,WAAb,KAA6BL,IAAI,CAACM,MAAL,KAAgB,MAAhD,EAAuD;AACnD,cAAIC,OAAO,GAAGhB,IAAI,CAACC,KAAL,CAAWQ,IAAI,CAACQ,IAAhB,CAAd,CADmD,CAGnD;;AACA,cAAIC,aAAa,GAAGnB,KAAK,CAACoB,MAAN,CAAaC,IAAI,IAAI;AAAC,mBAAOA,IAAI,CAACC,QAAL,KAAkBL,OAAO,CAACK,QAAjC;AAA4C,WAAlE,EAAoEC,MAAxF;;AACA,cAAGJ,aAAH,EAAiB;AACbN,YAAAA,MAAM,CAAC,eAAcI,OAAO,CAACK,QAAtB,GAAiC,oBAAlC,CAAN;AACA;AACH,WARkD,CAUnD;;;AACAL,UAAAA,OAAO,CAACO,EAAR,GAAaH,IAAI,CAACE,MAAL,GAAcE,IAAI,CAACC,GAAL,CAAS,GAAG1B,KAAK,CAAC2B,GAAN,CAAUN,IAAI,IAAIA,IAAI,CAACG,EAAvB,CAAZ,IAAyC,CAAvD,GAA2D,CAAxE;AACAxB,UAAAA,KAAK,CAAC4B,IAAN,CAAWX,OAAX;AACAd,UAAAA,YAAY,CAAC0B,OAAb,CAAqB,OAArB,EAA8B5B,IAAI,CAAC6B,SAAL,CAAe9B,KAAf,CAA9B,EAbmD,CAenD;;AACAY,UAAAA,OAAO,CAAC;AAACmB,YAAAA,EAAE,EAAC,IAAJ;AAAUC,YAAAA,IAAI,EAAE,MAAMrB,OAAO,CAACC,OAAR;AAAtB,WAAD,CAAP;AACA;AACH;;AAEDN,QAAAA,SAAS,CAACG,GAAD,EAAMC,IAAN,CAAT,CAAqBuB,IAArB,CAA0BC,QAAQ,IAAItB,OAAO,CAACsB,QAAD,CAA7C;AACH,OAxBS,EAwBR,GAxBQ,CAAV;AAyBC,KA1BM,CAAP;AA2BH,GA5BD;AA6BH","sourcesContent":["\n//array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users'));\n\n//backend\nexport function configureBackend(){\n    let realFetch = window.fetch;\n    window.fetch = function(url,opts){\n        return new Promise((resolve,reject) => {\n        setTimeout(() => {\n            \n            //register user\n            if(url.endsWith('/register') && opts.method === 'POST'){\n                let newUser = JSON.parse(opts.body);\n\n                //check if duplicate\n                let duplicateUser = users.filter(user => {return user.username === newUser.username; }).length;\n                if(duplicateUser){\n                    reject('Username \"' +newUser.username + '\" is already taken');\n                    return;\n                }\n\n                //save new user\n                newUser.id = user.length ? Math.max(...users.map(user => user.id)) +1 : 1;\n                users.push(newUser);\n                localStorage.setItem('users', JSON.stringify(users));\n\n                //respond\n                resolve({ok:true, text: () => Promise.resolve()});\n                return;\n            }\n\n            realFetch(url, opts).then(response => resolve(response));\n        },500);\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}